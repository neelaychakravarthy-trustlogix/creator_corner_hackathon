name: Build and Deploy to ECR

on:
  push:
    branches:
      - main  # or develop or your default branch

jobs:
  release:
    name: Generate Semantic Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}  # important for full commit history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install semantic-release dependencies
        run: |
          npm install --save-dev semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github

      - name: Run semantic-release dry-run to get version
        id: setver
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release dry-run..."
          
          set +e
          RAW=$(npx semantic-release --dry-run)
          STATUS=$?
          set -e

          echo "$RAW"

          VERSION=$(echo "$RAW" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+')
          
          if [ -z "$VERSION" ]; then
            echo "❌ No semantic version could be calculated (no valid commits?)"
            exit 0
          fi

          echo "✅ Calculated version: v$VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Run semantic-release to publish GitHub release
        if: ${{ github.ref == 'refs/heads/main' }}  # or your main branch
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          npx semantic-release



  build-and-push:
    name: Build and Push Docker Images to ECR
    needs: release
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_9242 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_9242 }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # --- Build & Push external-ecs ---
      - name: Build external-ecs
        run: |
          docker build -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.VERSION}} -f ./sample_external_ecs/Dockerfile .
          # docker tag external-ecs:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/external-ecs
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.VERSION}}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tlx/external-ecs
          VERSION: ${{ needs.release.outputs.version }}


      # --- Build & Push internal-ecs ---
      - name: Build internal-ecs
        run: |
          docker build -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.VERSION}} -f ./sample_internal_ecs/Dockerfile .
          # docker tag sample-internal-ecs:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/sample-internal-ecs
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.VERSION}}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tlx/internal-ecs
          VERSION: ${{ needs.release.outputs.version }}

